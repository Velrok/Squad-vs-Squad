{"name":"Squad-vs-squad","tagline":"The successor of Agent vs Agent (https://github.com/Velrok/Agent-vs-Agent). Uses sockets and threads instead of callbacks and turn by turn events.","body":"# Squad vs Squad\r\n\r\nIs a successor of [Agent vs Agent](https://github.com/Velrok/Agent-vs-Agent)(AvA).\r\n\r\nLike AvA Squad vs Squad is a programming game. The rules a very similar:\r\n\r\n## Rules of the Game\r\n\r\n### The Goal\r\n\r\nThe goal is to write a squad of processes that collect all the point randomly distributes on a 2D field faster than the other squad.\r\n\r\n\r\n### The Field\r\n\r\nIt is a configurable `<width> x <height>` donat, which means stepping out on one side will port you back to the other side (top-> bottom, left -> right, and so forth).\r\n\r\nFor programmers:\r\n\r\n```\r\nget_position(x, y):\r\n  return [x % width , y % height]\r\n```\r\n\r\n### The Setup\r\n\r\nOn the field a configurable amount of *points* is *randomly distributed*.\r\nEach squad has a *home base*. The squad size is configurable.\r\n\r\nA *game master process* sets up *one port for each squad member process*. When all members are connected the game starts.\r\n\r\n\r\n### Playing the Game\r\n\r\nThe game master will always announce the current surrounding and then ask for an action. The squad member process can then decide to do one of the following:\r\n\r\n- move (top, down, left, right)\r\n- communicate\r\n\t- a broadcast to all fellow squad members\r\n- collect\r\n\t- attempt to collect a point from the current position\r\n\t- one squad member can only carry one point at a time\r\n\t- entering the home base with a point will score the point\r\n\t\r\nEach action takes time (in milliseconds) how much exactly is jet to define.\r\n\r\n\r\n### Winning the Game\r\n\r\nThe squad with the most points wins.\r\nThe games ends when all points are scored.\r\n\r\n\r\n## Getting Technical\r\n\r\nAll communication is done via *sockets* using the *JSON format*.\r\nA message has to end with a newline and may not contain any newlines inside a message.\r\n\r\n### Protocol Definition\r\n\r\nJet to come.\r\n\r\n\r\n## Running an Example\r\n\r\nJet to come.\r\n\r\n\r\n\r\n## License\r\n\r\nCopyright Â© 2013 FIXME\r\n\r\nDistributed under the Eclipse Public License, the same as Clojure.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}